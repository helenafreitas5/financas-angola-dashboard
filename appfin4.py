import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np

# Configura√ß√£o da p√°gina com tema personalizado
st.set_page_config(
    page_title="An√°lise Financeira GenAI - Angola",
    page_icon="üá¶üá¥",
    layout="wide"
)

# Fun√ß√£o para criar dados fict√≠cios da execu√ß√£o or√ßament√°ria
def criar_dados_orcamento():
    """
    Cria dados fict√≠cios de execu√ß√£o or√ßament√°ria por setor e per√≠odo
    Retorna um DataFrame com informa√ß√µes de or√ßamento planejado vs realizado
    """
    setores = ['Sa√∫de', 'Educa√ß√£o', 'Infraestrutura', 'Agricultura', 'Defesa', 
               'Energia', 'Transportes', 'Tecnologia', 'Administra√ß√£o']
    
    dados = []
    data_inicial = datetime(2023, 1, 1)
    
    for mes in range(12):
        data = data_inicial + timedelta(days=mes*30)
        for setor in setores:
            orcamento_planejado = np.random.uniform(5000000, 15000000)
            # O realizado varia entre 80% e 120% do planejado
            orcamento_realizado = orcamento_planejado * np.random.uniform(0.8, 1.2)
            
            dados.append({
                'Data': data,
                'Setor': setor,
                'Or√ßamento_Planejado': orcamento_planejado,
                'Or√ßamento_Realizado': orcamento_realizado,
                'Taxa_Execu√ß√£o': (orcamento_realizado/orcamento_planejado) * 100
            })
    
    return pd.DataFrame(dados)

# Fun√ß√£o para criar dados fict√≠cios de receitas fiscais
def criar_dados_receitas():
    """
    Cria dados fict√≠cios de receitas fiscais por tipo e regi√£o
    Retorna um DataFrame com informa√ß√µes detalhadas de arrecada√ß√£o
    """
    tipos_receita = ['IVA', 'Imposto de Renda', 'Royalties Petr√≥leo', 
                     'Taxas Aduaneiras', 'Impostos Corporativos']
    regioes = ['Luanda', 'Benguela', 'Huambo', 'Hu√≠la', 'Cabinda']
    
    dados = []
    data_inicial = datetime(2023, 1, 1)
    
    for mes in range(12):
        data = data_inicial + timedelta(days=mes*30)
        for tipo in tipos_receita:
            for regiao in regioes:
                valor = np.random.uniform(1000000, 8000000)
                dados.append({
                    'Data': data,
                    'Tipo_Receita': tipo,
                    'Regi√£o': regiao,
                    'Valor': valor,
                    'Meta_Mensal': valor * np.random.uniform(0.9, 1.1)
                })
    
    return pd.DataFrame(dados)

# Fun√ß√£o para criar dados fict√≠cios de d√≠vida p√∫blica
def criar_dados_divida():
    """
    Cria dados fict√≠cios da d√≠vida p√∫blica
    Retorna um DataFrame com informa√ß√µes sobre a d√≠vida interna e externa
    """
    tipos_divida = ['Interna', 'Externa']
    categorias = ['T√≠tulos Governamentais', 'Empr√©stimos Banc√°rios', 
                  'Organismos Internacionais', 'Bonds Soberanos']
    
    dados = []
    data_inicial = datetime(2023, 1, 1)
    
    for mes in range(12):
        data = data_inicial + timedelta(days=mes*30)
        for tipo in tipos_divida:
            for categoria in categorias:
                valor = np.random.uniform(10000000, 50000000)
                juros = np.random.uniform(0.03, 0.08)
                dados.append({
                    'Data': data,
                    'Tipo_D√≠vida': tipo,
                    'Categoria': categoria,
                    'Valor': valor,
                    'Taxa_Juros': juros,
                    'Prazo_Anos': np.random.randint(5, 30)
                })
    
    return pd.DataFrame(dados)

# Fun√ß√£o para criar dados fict√≠cios de indicadores econ√¥micos
def criar_dados_indicadores():
    """
    Cria dados fict√≠cios de indicadores econ√¥micos
    Retorna um DataFrame com diversos indicadores macroecon√¥micos
    """
    dados = []
    data_inicial = datetime(2023, 1, 1)
    
    for mes in range(12):
        data = data_inicial + timedelta(days=mes*30)
        dados.append({
            'Data': data,
            'PIB_Varia√ß√£o': np.random.uniform(-0.5, 2.0),
            'Infla√ß√£o': np.random.uniform(5, 12),
            'Taxa_C√¢mbio_USD': np.random.uniform(500, 550),
            'Reservas_Internacionais': np.random.uniform(15000, 20000),
            'Pre√ßo_Petr√≥leo': np.random.uniform(70, 90)
        })
    
    return pd.DataFrame(dados)

# Fun√ß√£o do Agente IA para an√°lise avan√ßada dos dados
def analisar_dados_ia(pergunta, dfs):
    """
    Fun√ß√£o que analisa os dados usando processamento de linguagem natural
    Recebe uma pergunta em linguagem natural e os DataFrames com os dados
    Retorna uma resposta contextualizada com an√°lises relevantes
    """
    pergunta = pergunta.lower()
    
    # Extrai os DataFrames do dicion√°rio
    df_orcamento = dfs['orcamento']
    df_receitas = dfs['receitas']
    df_divida = dfs['divida']
    df_indicadores = dfs['indicadores']
    
    # An√°lise baseada em palavras-chave e contexto
    resposta = ""
    
    # An√°lise de or√ßamento
    if any(palavra in pergunta for palavra in ['or√ßamento', 'gastos', 'despesas']):
        taxa_media_execucao = df_orcamento['Taxa_Execu√ß√£o'].mean()
        setor_maior_orcamento = df_orcamento.groupby('Setor')['Or√ßamento_Realizado'].sum().idxmax()
        
        resposta += f"A taxa m√©dia de execu√ß√£o or√ßament√°ria √© de {taxa_media_execucao:.1f}%. "
        resposta += f"O setor com maior or√ßamento realizado √© {setor_maior_orcamento}. "

    # An√°lise de receitas
    if any(palavra in pergunta for palavra in ['receita', 'arrecada√ß√£o', 'fiscal']):
        receita_total = df_receitas['Valor'].sum()
        regiao_maior_receita = df_receitas.groupby('Regi√£o')['Valor'].sum().idxmax()
        
        resposta += f"A receita total √© de {receita_total:,.2f} AOA. "
        resposta += f"A regi√£o com maior arrecada√ß√£o √© {regiao_maior_receita}. "

    # An√°lise de d√≠vida
    if any(palavra in pergunta for palavra in ['d√≠vida', 'juros', 'empr√©stimos']):
        divida_total = df_divida['Valor'].sum()
        taxa_media_juros = df_divida['Taxa_Juros'].mean() * 100
        
        resposta += f"A d√≠vida total √© de {divida_total:,.2f} AOA. "
        resposta += f"A taxa m√©dia de juros √© de {taxa_media_juros:.1f}%. "

    # An√°lise de indicadores
    if any(palavra in pergunta for palavra in ['indicadores', 'economia', 'infla√ß√£o', 'pib']):
        inflacao_media = df_indicadores['Infla√ß√£o'].mean()
        variacao_pib = df_indicadores['PIB_Varia√ß√£o'].mean()
        
        resposta += f"A infla√ß√£o m√©dia √© de {inflacao_media:.1f}%. "
        resposta += f"A varia√ß√£o m√©dia do PIB √© de {variacao_pib:.1f}%. "

    # An√°lise temporal
    if any(palavra in pergunta for palavra in ['evolu√ß√£o', 'tend√™ncia', 'varia√ß√£o']):
        ultima_inflacao = df_indicadores.iloc[-1]['Infla√ß√£o']
        primeira_inflacao = df_indicadores.iloc[0]['Infla√ß√£o']
        variacao_inflacao = ((ultima_inflacao / primeira_inflacao) - 1) * 100
        
        resposta += f"A infla√ß√£o teve uma varia√ß√£o de {variacao_inflacao:.1f}% no per√≠odo. "

    # Se nenhuma an√°lise espec√≠fica foi encontrada
    if not resposta:
        resposta = """
        Posso ajudar com an√°lises sobre:
        - Execu√ß√£o or√ßament√°ria e gastos por setor
        - Receitas fiscais e arrecada√ß√£o por regi√£o
        - Situa√ß√£o da d√≠vida p√∫blica e juros
        - Indicadores econ√¥micos (PIB, infla√ß√£o, c√¢mbio)
        - Tend√™ncias e evolu√ß√£o temporal dos dados
        
        Por favor, reformule sua pergunta usando algumas dessas palavras-chave.
        """
    
    return resposta

# Interface principal da aplica√ß√£o
def main():
    # Configura√ß√£o do t√≠tulo e estilo
    st.title("üá¶üá¥ An√°lise de Dados com GenAI - Minist√©rio das Finan√ßas de Angola")
    
    # Cria√ß√£o dos dados fict√≠cios
    dfs = {
        'orcamento': criar_dados_orcamento(),
        'receitas': criar_dados_receitas(),
        'divida': criar_dados_divida(),
        'indicadores': criar_dados_indicadores()
    }
    
    # Barra lateral com o Assistente IA
    st.sidebar.title("üí° Assistente IA Financeiro")
    pergunta = st.sidebar.text_input(
        "Fa√ßa uma pergunta sobre os dados:",
        placeholder="Ex: Como est√° a execu√ß√£o or√ßament√°ria?"
    )
    
    if pergunta:
        resposta = analisar_dados_ia(pergunta, dfs)
        st.sidebar.markdown(f"**Resposta:**\n{resposta}")
    
    # Tabs para diferentes vis√µes dos dados
    tab1, tab2, tab3, tab4 = st.tabs([
        "Execu√ß√£o Or√ßament√°ria", 
        "Receitas Fiscais", 
        "D√≠vida P√∫blica",
        "Indicadores Econ√¥micos"
    ])
    
    # Tab 1 - Execu√ß√£o Or√ßament√°ria
    with tab1:
        st.subheader("An√°lise da Execu√ß√£o Or√ßament√°ria")
        
        # Gr√°fico de execu√ß√£o por setor
        fig_orcamento = px.bar(
            dfs['orcamento'],
            x='Setor',
            y=['Or√ßamento_Planejado', 'Or√ßamento_Realizado'],
            title='Or√ßamento Planejado vs Realizado por Setor',
            barmode='group'
        )
        st.plotly_chart(fig_orcamento, use_container_width=True)
        
        # Tabela detalhada
        st.dataframe(dfs['orcamento'])
    
    # Tab 2 - Receitas Fiscais
    with tab2:
        st.subheader("An√°lise de Receitas Fiscais")
        
        # Gr√°fico de receitas por regi√£o
        fig_receitas = px.pie(
            dfs['receitas'].groupby('Regi√£o')['Valor'].sum().reset_index(),
            values='Valor',
            names='Regi√£o',
            title='Distribui√ß√£o de Receitas por Regi√£o'
        )
        st.plotly_chart(fig_receitas, use_container_width=True)
        
        # Tabela detalhada
        st.dataframe(dfs['receitas'])
    
    # Tab 3 - D√≠vida P√∫blica
    with tab3:
        st.subheader("An√°lise da D√≠vida P√∫blica")
        
        # Gr√°fico de composi√ß√£o da d√≠vida
        fig_divida = px.sunburst(
            dfs['divida'],
            path=['Tipo_D√≠vida', 'Categoria'],
            values='Valor',
            title='Composi√ß√£o da D√≠vida P√∫blica'
        )
        st.plotly_chart(fig_divida, use_container_width=True)
        
        # Tabela detalhada
        st.dataframe(dfs['divida'])
    
    # Tab 4 - Indicadores Econ√¥micos
    with tab4:
        st.subheader("Indicadores Econ√¥micos")
        
        # Gr√°fico de linha temporal
        fig_indicadores = go.Figure()
        
        fig_indicadores.add_trace(go.Scatter(
            x=dfs['indicadores']['Data'],
            y=dfs['indicadores']['Infla√ß√£o'],
            name='Infla√ß√£o (%)'
        ))
        
        fig_indicadores.add_trace(go.Scatter(
            x=dfs['indicadores']['Data'],
            y=dfs['indicadores']['PIB_Varia√ß√£o'],
            name='Varia√ß√£o PIB (%)'
        ))
        
        fig_indicadores.update_layout(title='Evolu√ß√£o dos Indicadores Econ√¥micos')
        st.plotly_chart(fig_indicadores, use_container_width=True)
        
        # Tabela detalhada
        st.dataframe(dfs['indicadores'])

if __name__ == "__main__":
    main()